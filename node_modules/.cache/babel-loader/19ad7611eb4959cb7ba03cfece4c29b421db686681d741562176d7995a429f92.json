{"ast":null,"code":"import OpenAI from 'openai';\n\n// Inicializar cliente de OpenAI con la API key del archivo .env\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Permitir uso en el navegador (solo para demo)\n});\n\n/**\n * Obtiene información sobre una tecnología usando GPT-3.5 Turbo\n * @param {string} technology - El nombre de la tecnología\n * @returns {Promise<{description: string, officialUrl: string, wikipediaUrl: string}>} - Descripción y URLs\n */\nexport const getTechnologyInfo = async technology => {\n  try {\n    const prompt = `\n    Dame la siguiente información sobre ${technology}:\n    \n    1. Una descripción técnica extensa en español (250-300 palabras) que incluya:\n       - Propósito principal y casos de uso\n       - Características técnicas distintivas\n       - Ventajas respecto a tecnologías similares\n       - Historia de desarrollo si es relevante\n       - Aspectos arquitectónicos importantes\n       - Conceptos de programación fundamentales que utiliza\n       \n    2. La URL oficial de la tecnología (sitio web del proyecto, repositorio oficial, o documentación principal)\n    \n    3. La URL de Wikipedia en español si existe, o en inglés si no hay en español\n    \n    Devuelve la información en formato JSON con este formato exacto:\n    {\n      \"description\": \"La descripción técnica detallada aquí con aspectos técnicos, conceptos de programación y otros detalles importantes\",\n      \"officialUrl\": \"https://sitio-oficial-de-la-tecnologia.com\",\n      \"wikipediaUrl\": \"https://es.wikipedia.org/wiki/...\"\n    }\n    \n    Si no encuentras la URL oficial, asegúrate de incluir al menos la URL de Wikipedia.\n    Solo devuelve el JSON, nada más.\n    `;\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"Eres un experto en ingeniería de software y tecnologías de programación. Proporcionas información técnica detallada que sea útil para desarrolladores. Tu enfoque es altamente técnico y educativo. Siempre incluyes enlaces oficiales precisos y actualizados.\"\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      temperature: 0.2,\n      max_tokens: 1000 // Aumentar el límite para descripciones más extensas\n    });\n    const content = response.choices[0].message.content.trim();\n\n    // Extraer el JSON de la respuesta\n    const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      const jsonContent = jsonMatch[0];\n      return JSON.parse(jsonContent);\n    }\n\n    // Si no se pudo extraer el JSON, devolver un objeto con valores por defecto\n    return {\n      description: `No se pudo obtener información sobre ${technology}.`,\n      officialUrl: `https://www.google.com/search?q=${encodeURIComponent(technology)}+official+website`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  } catch (error) {\n    console.error(\"Error al obtener información de la tecnología:\", error);\n    return {\n      description: `Error al obtener información sobre ${technology}: ${error.message}`,\n      officialUrl: `https://www.google.com/search?q=${encodeURIComponent(technology)}+official+website`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","getTechnologyInfo","technology","prompt","response","chat","completions","create","model","messages","role","content","temperature","max_tokens","choices","message","trim","jsonMatch","match","jsonContent","JSON","parse","description","officialUrl","encodeURIComponent","wikipediaUrl","error","console"],"sources":["/home/the00b/Escritorio/LENG/validador-tecnologias/src/services/openai.js"],"sourcesContent":["import OpenAI from 'openai';\n\n// Inicializar cliente de OpenAI con la API key del archivo .env\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Permitir uso en el navegador (solo para demo)\n});\n\n/**\n * Obtiene información sobre una tecnología usando GPT-3.5 Turbo\n * @param {string} technology - El nombre de la tecnología\n * @returns {Promise<{description: string, officialUrl: string, wikipediaUrl: string}>} - Descripción y URLs\n */\nexport const getTechnologyInfo = async (technology) => {\n  try {\n    const prompt = `\n    Dame la siguiente información sobre ${technology}:\n    \n    1. Una descripción técnica extensa en español (250-300 palabras) que incluya:\n       - Propósito principal y casos de uso\n       - Características técnicas distintivas\n       - Ventajas respecto a tecnologías similares\n       - Historia de desarrollo si es relevante\n       - Aspectos arquitectónicos importantes\n       - Conceptos de programación fundamentales que utiliza\n       \n    2. La URL oficial de la tecnología (sitio web del proyecto, repositorio oficial, o documentación principal)\n    \n    3. La URL de Wikipedia en español si existe, o en inglés si no hay en español\n    \n    Devuelve la información en formato JSON con este formato exacto:\n    {\n      \"description\": \"La descripción técnica detallada aquí con aspectos técnicos, conceptos de programación y otros detalles importantes\",\n      \"officialUrl\": \"https://sitio-oficial-de-la-tecnologia.com\",\n      \"wikipediaUrl\": \"https://es.wikipedia.org/wiki/...\"\n    }\n    \n    Si no encuentras la URL oficial, asegúrate de incluir al menos la URL de Wikipedia.\n    Solo devuelve el JSON, nada más.\n    `;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        { role: \"system\", content: \"Eres un experto en ingeniería de software y tecnologías de programación. Proporcionas información técnica detallada que sea útil para desarrolladores. Tu enfoque es altamente técnico y educativo. Siempre incluyes enlaces oficiales precisos y actualizados.\" },\n        { role: \"user\", content: prompt }\n      ],\n      temperature: 0.2,\n      max_tokens: 1000,  // Aumentar el límite para descripciones más extensas\n    });\n\n    const content = response.choices[0].message.content.trim();\n    \n    // Extraer el JSON de la respuesta\n    const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      const jsonContent = jsonMatch[0];\n      return JSON.parse(jsonContent);\n    }\n    \n    // Si no se pudo extraer el JSON, devolver un objeto con valores por defecto\n    return {\n      description: `No se pudo obtener información sobre ${technology}.`,\n      officialUrl: `https://www.google.com/search?q=${encodeURIComponent(technology)}+official+website`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  } catch (error) {\n    console.error(\"Error al obtener información de la tecnología:\", error);\n    return {\n      description: `Error al obtener información sobre ${technology}: ${error.message}`,\n      officialUrl: `https://www.google.com/search?q=${encodeURIComponent(technology)}+official+website`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  }\n}; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;;AAE3B;AACA,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EAC5CC,uBAAuB,EAAE,IAAI,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,UAAU,IAAK;EACrD,IAAI;IACF,MAAMC,MAAM,GAAG;AACnB,0CAA0CD,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAME,QAAQ,GAAG,MAAMT,MAAM,CAACU,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACpDC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAkQ,CAAC,EAC9R;QAAED,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAER;MAAO,CAAC,CAClC;MACDS,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE,IAAI,CAAG;IACrB,CAAC,CAAC;IAEF,MAAMF,OAAO,GAAGP,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,OAAO,CAACK,IAAI,CAAC,CAAC;;IAE1D;IACA,MAAMC,SAAS,GAAGN,OAAO,CAACO,KAAK,CAAC,aAAa,CAAC;IAC9C,IAAID,SAAS,EAAE;MACb,MAAME,WAAW,GAAGF,SAAS,CAAC,CAAC,CAAC;MAChC,OAAOG,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC;IAChC;;IAEA;IACA,OAAO;MACLG,WAAW,EAAE,wCAAwCpB,UAAU,GAAG;MAClEqB,WAAW,EAAE,mCAAmCC,kBAAkB,CAACtB,UAAU,CAAC,mBAAmB;MACjGuB,YAAY,EAAE,iCAAiCD,kBAAkB,CAACtB,UAAU,CAAC;IAC/E,CAAC;EACH,CAAC,CAAC,OAAOwB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IACtE,OAAO;MACLJ,WAAW,EAAE,sCAAsCpB,UAAU,KAAKwB,KAAK,CAACX,OAAO,EAAE;MACjFQ,WAAW,EAAE,mCAAmCC,kBAAkB,CAACtB,UAAU,CAAC,mBAAmB;MACjGuB,YAAY,EAAE,iCAAiCD,kBAAkB,CAACtB,UAAU,CAAC;IAC/E,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}