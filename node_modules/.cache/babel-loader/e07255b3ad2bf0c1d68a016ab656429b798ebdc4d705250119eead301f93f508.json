{"ast":null,"code":"import OpenAI from 'openai';\n\n// Inicializar cliente de OpenAI con la API key del archivo .env\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Permitir uso en el navegador (solo para demo)\n});\n\n/**\n * Obtiene información sobre una tecnología usando GPT-3.5 Turbo\n * @param {string} technology - El nombre de la tecnología\n * @returns {Promise<{description: string, wikipediaUrl: string}>} - Descripción y URL de Wikipedia\n */\nexport const getTechnologyInfo = async technology => {\n  try {\n    const prompt = `\n    Dame la siguiente información sobre ${technology}:\n    1. Una descripción breve y técnica en español (máximo 100 palabras)\n    2. La URL de Wikipedia en español si existe, o en inglés si no hay en español\n    \n    Devuelve la información en formato JSON con este formato exacto:\n    {\n      \"description\": \"La descripción aquí\",\n      \"wikipediaUrl\": \"https://es.wikipedia.org/wiki/...\"\n    }\n    \n    Solo devuelve el JSON, nada más.\n    `;\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"Eres un asistente especializado en tecnologías de programación. Debes proporcionar información técnica precisa en formato JSON.\"\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      temperature: 0.2\n    });\n    const content = response.choices[0].message.content.trim();\n\n    // Extraer el JSON de la respuesta\n    const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      const jsonContent = jsonMatch[0];\n      return JSON.parse(jsonContent);\n    }\n\n    // Si no se pudo extraer el JSON, devolver un objeto con valores por defecto\n    return {\n      description: `No se pudo obtener información sobre ${technology}.`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  } catch (error) {\n    console.error(\"Error al obtener información de la tecnología:\", error);\n    return {\n      description: `Error al obtener información sobre ${technology}: ${error.message}`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","getTechnologyInfo","technology","prompt","response","chat","completions","create","model","messages","role","content","temperature","choices","message","trim","jsonMatch","match","jsonContent","JSON","parse","description","wikipediaUrl","encodeURIComponent","error","console"],"sources":["/home/the00b/Escritorio/LENG/validador-tecnologias/src/services/openai.js"],"sourcesContent":["import OpenAI from 'openai';\n\n// Inicializar cliente de OpenAI con la API key del archivo .env\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Permitir uso en el navegador (solo para demo)\n});\n\n/**\n * Obtiene información sobre una tecnología usando GPT-3.5 Turbo\n * @param {string} technology - El nombre de la tecnología\n * @returns {Promise<{description: string, wikipediaUrl: string}>} - Descripción y URL de Wikipedia\n */\nexport const getTechnologyInfo = async (technology) => {\n  try {\n    const prompt = `\n    Dame la siguiente información sobre ${technology}:\n    1. Una descripción breve y técnica en español (máximo 100 palabras)\n    2. La URL de Wikipedia en español si existe, o en inglés si no hay en español\n    \n    Devuelve la información en formato JSON con este formato exacto:\n    {\n      \"description\": \"La descripción aquí\",\n      \"wikipediaUrl\": \"https://es.wikipedia.org/wiki/...\"\n    }\n    \n    Solo devuelve el JSON, nada más.\n    `;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        { role: \"system\", content: \"Eres un asistente especializado en tecnologías de programación. Debes proporcionar información técnica precisa en formato JSON.\" },\n        { role: \"user\", content: prompt }\n      ],\n      temperature: 0.2,\n    });\n\n    const content = response.choices[0].message.content.trim();\n    \n    // Extraer el JSON de la respuesta\n    const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      const jsonContent = jsonMatch[0];\n      return JSON.parse(jsonContent);\n    }\n    \n    // Si no se pudo extraer el JSON, devolver un objeto con valores por defecto\n    return {\n      description: `No se pudo obtener información sobre ${technology}.`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  } catch (error) {\n    console.error(\"Error al obtener información de la tecnología:\", error);\n    return {\n      description: `Error al obtener información sobre ${technology}: ${error.message}`,\n      wikipediaUrl: `https://es.wikipedia.org/wiki/${encodeURIComponent(technology)}`\n    };\n  }\n}; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;;AAE3B;AACA,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EAC5CC,uBAAuB,EAAE,IAAI,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,UAAU,IAAK;EACrD,IAAI;IACF,MAAMC,MAAM,GAAG;AACnB,0CAA0CD,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAME,QAAQ,GAAG,MAAMT,MAAM,CAACU,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACpDC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAkI,CAAC,EAC9J;QAAED,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAER;MAAO,CAAC,CAClC;MACDS,WAAW,EAAE;IACf,CAAC,CAAC;IAEF,MAAMD,OAAO,GAAGP,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC;;IAE1D;IACA,MAAMC,SAAS,GAAGL,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;IAC9C,IAAID,SAAS,EAAE;MACb,MAAME,WAAW,GAAGF,SAAS,CAAC,CAAC,CAAC;MAChC,OAAOG,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC;IAChC;;IAEA;IACA,OAAO;MACLG,WAAW,EAAE,wCAAwCnB,UAAU,GAAG;MAClEoB,YAAY,EAAE,iCAAiCC,kBAAkB,CAACrB,UAAU,CAAC;IAC/E,CAAC;EACH,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IACtE,OAAO;MACLH,WAAW,EAAE,sCAAsCnB,UAAU,KAAKsB,KAAK,CAACV,OAAO,EAAE;MACjFQ,YAAY,EAAE,iCAAiCC,kBAAkB,CAACrB,UAAU,CAAC;IAC/E,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}